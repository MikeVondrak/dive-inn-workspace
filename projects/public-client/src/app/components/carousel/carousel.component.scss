@use 'sass:math';
@use '../../scss/utility';

$debugging: false;

$cubeSize: 50vw;
$cubeSizeLg: 40vw;
$offset: math.div($cubeSize, 2);
$offsetZ: $cubeSize * 1.35;
$rotateX: 0deg;
$pixelBleedScaleFix: 1.001;

:host {
  --cubeSize: 50vw;
  @include utility.media-breakpoint-gte(lg) {
    --cubeSize: 40vw;
  }  
  display: block;
  perspective: 100vw;
  
  .carousel {
    transform: translateZ(-$offsetZ);
    perspective: 10000px;
    transform-style: preserve-3d;
    
    &-container {
      transform-style: preserve-3d;
      position: relative;
      height: var(--cubeSize);
      @include utility.media-breakpoint-gte(lg) {
        height: $cubeSizeLg;
      }
      display: flex;
      justify-content: center;
      align-items: center;
      transform: rotateX($rotateX) var(--rotation);
      transition: all 1s ease;

      // &.rotate {
      //   transform: rotateX($rotateX) rotateY(-45deg);
      // }

      .face {
        position: absolute;
        display: flex;
        justify-content: center;
        align-items: center;
        width: var(--cubeSize);
        height: var(--cubeSize);        
        font-size: 2rem;
        font-weight: bold;
        background: utility.$dive-black;
        backface-visibility: hidden;        
        background-size: 200%;
        background-position: 50% 0%;
        background-image: linear-gradient(90deg, utility.$dive-black 0%, transparent 25%, transparent 75%, utility.$dive-black 100%);
        transition: all 1s ease;

        &.w {
          @if ($debugging) { background-color: red; }
          //transform: var(--transformW);
          transform: translate3d(calc(-1.207 * var(--cubeSize)), 0, 0) rotateY(-90deg) scale($pixelBleedScaleFix);
        }

        &.sw {
          @if ($debugging) { background-color: purple; }
          transform: translate3d(calc(-0.854 * var(--cubeSize)), 0, calc(var(--cubeSize) * 0.854)) rotateY(-45deg) scale($pixelBleedScaleFix);
        }

        &.s {
          @if ($debugging) { background-color: blue; }
          transform: translateZ(calc(1.207 * var(--cubeSize))) rotateY(0deg) scale($pixelBleedScaleFix);
        }

        &.se {
          @if ($debugging) { background-color: teal; }
          transform: translate3d(calc(0.854 * var(--cubeSize)), 0, calc(0.854 * var(--cubeSize))) rotateY(45deg) scale($pixelBleedScaleFix);
        }

        &.e {
          @if ($debugging) { background-color: green; }
          transform: translate3d(calc(1.207 * var(--cubeSize)), 0, calc(0 * var(--cubeSize))) rotateY(90deg) scale($pixelBleedScaleFix);
        }
        &.ne {
          @if ($debugging) { background-color: yellowgreen; }
          transform: translate3d(calc(0.854 * var(--cubeSize)), 0, calc(-0.854 * var(--cubeSize))) rotateY(135deg) scale($pixelBleedScaleFix);
        }
        &.n {
          @if ($debugging) { background-color: darkkhaki; }
          transform: translateZ(calc(-1.207 * var(--cubeSize))) rotateY(180deg) scale($pixelBleedScaleFix);
        }
        &.nw {
          @if ($debugging) { background-color: orange; }
          transform: translate3d(calc(-0.854 * var(--cubeSize)), 0, calc(-0.854 * var(--cubeSize))) rotateY(-135deg) scale($pixelBleedScaleFix);
        }        

        &.left-gradient {
          background-position: 0% 0%;
          
          .overlay {
            background-position: left;
          }
        }
        &.right-gradient {
          background-position: 100% 0%;

          .overlay {
            background-position: right;
          }
        }
        .overlay {
          position: absolute;
          top: 0; bottom: 0; left: 0; right: 0;
          background-size: 400%;
          background-position: center;
          background-image: linear-gradient(90deg, utility.$dive-black 0%, transparent 45%, transparent 55%, utility.$dive-black 100%);
          z-index: 1;
          transition: all 1s ease;
          pointer-events: none;
        }
      }

    }

    .rotaters {
      position: absolute;
      top: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transform: translateZ(var(--cubeSize));
      .rotate {
        position: relative;
        background-color: rgba(0,0,0,0.15);
        height: calc(0.85 * var(--cubeSize));
        font-size: clamp(1rem, 2vw, 3rem);
        &.left {
          left: -1rem;
        }
        &.right {
          right: -1rem;
        }
        @include utility.media-breakpoint-gte(lg) {
          &.left {
            left: 7vw;
          }
          &.right {
            right: 7vw;
          }
        }
        @include utility.media-breakpoint-gte(ws) {
          &.left {
            left: 9vw;
          }
          &.right {
            right: 9vw;
          }
        }
      }
    }
  }
}